// READ SYSTEM CALL 


// storing userSP
alias userSP R5;
userSP = SP;

// extracting system call number from user stack
alias system_call_number R6;
system_call_number = [[PTBR + 2 * (userSP - 5) / 512] * 512 + (userSP - 5) % 512];


// switching to kernel stack
alias current_PID R7;
alias process_table_entry R8;
current_PID = [SYSTEM_STATUS_TABLE + 1];
process_table_entry = PROCESS_TABLE + current_PID * 16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11] * 512 - 1;

[process_table_entry + 9] = INT_READ;

// arguments are file Descriptor and a buffer 

alias file_descriptor R9;
file_descriptor = [[PTBR + 2 * (userSP - 4) / 512] * 512 + (userSP - 4) % 512];

alias word_address R10;
word_address = [[PTBR + 2 * (userSP - 3) / 512] * 512 + (userSP - 3) % 512];

alias return_address R11;
return_address = [PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512;

if(file_descriptor == -1) then
    // then terminal read
    multipush(R5, R6, R7, R8, R9, R10, R11);
    R1 = TERMINAL_READ;
    R2 = current_PID;
    R3 = word_address;
    call DEVICE_MANAGER;
    multipop(R5, R6, R7, R8, R9, R10, R11);

    // return 0
    [return_address] = 0;
    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;
endif;


// else its file read

// check if file descriptor is valid (i.e from 0 to 7)
if(file_descriptor < 0 || file_descriptor >= 8) then
    [process_table_entry + 9] = 0;
    // return -1
    [return_address] = -1;
    SP = userSP;
    ireturn;
endif;

// locate the per process resource table 

alias user_area_page_end R12;
user_area_page_end = [process_table_entry + 11] * 512 + RESOURCE_TABLE_OFFSET;

// resource identifier 
alias resource_id R13;
resource_id = [user_area_page_end + 2 * file_descriptor + 0];

if(resource_id != FILE) then
    [process_table_entry + 9] = 0;
    // return -1
    [return_address] = -1;
    SP = userSP;
    ireturn;
endif;

// get the index of open file table 
alias index_in_open_file_table R14;
index_in_open_file_table = [user_area_page_end + 2 * file_descriptor + 1];

// get the index in inode table from open file table entry
alias index_in_inode_table R15;
index_in_inode_table = [OPEN_FILE_TABLE + 4 * index_in_open_file_table + 0];

// acquiring a lock on the file by calling ACQUIRE_INODE in
// resource manager

multipush(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
R1 = ACQUIRE_INODE;
R3 = current_PID;
R2 = index_in_inode_table;
call RESOURCE_MANAGER;
multipop(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);

if(R0 == -1) then
    [process_table_entry + 9] = 0;
    // acquiring inode failed, hence return -1
    [return_address] = -1;
    SP = userSP;
    ireturn;
endif;


// used up all registers from R5 to R15, hence using from R4 onwards
alias lseek R4;
lseek = [OPEN_FILE_TABLE + 4 * index_in_open_file_table + 2];

// getting the physical address corresponding to the logical address of memory
// buffer address given as input

alias phy_address_of_buffer R3;
phy_address_of_buffer = [[PTBR + 2 * word_address / 512] * 512 + (word_address % 512)];


// if file corresponds to root file  
if([OPEN_FILE_TABLE + 4 * index_in_open_file_table + 0] == INODE_ROOT) then
    // if lseek is equal to root file size i.e 480 
    if(lseek < 0 || lseek >= 480) then 
        // release inode and return -2
        multipush(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);
        R1 = RELEASE_INODE;
        R2 = index_in_inode_table;
        R3 = current_PID;
        call RESOURCE_MANAGER;
        multipop(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);

        // assuming release worked successfully 
        [process_table_entry + 9] = 0;

        // return -2
        [return_address] = -2;

        SP = userSP;
        ireturn;
    endif;

    // read from the word lseek position in memory copy of root file 
    // to the translated memory address
    [phy_address_of_buffer] = [ROOT_FILE + lseek];
    
    // increment the lseek position
    [OPEN_FILE_TABLE + 4 * index_in_open_file_table + 2] = [OPEN_FILE_TABLE + 4 * index_in_open_file_table + 2] + 1;

    // Release the Lock on the File by calling the release_inode() function in the Resource Manager module.
    multipush(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);
    R1 = RELEASE_INODE;
    R2 = index_in_inode_table;
    R3 = current_PID;
    call RESOURCE_MANAGER;
    multipop(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);

    // reset the mode flag
    [process_table_entry + 9] = 0;

    // return 0
    [return_address] = 0;
    SP = userSP;
    ireturn;

endif;


// if the file is not ROOT FILE, the below code executes

// if lseek position is same as file size, release inode and return -2

if(lseek < 0 || lseek >= [INODE_TABLE + index_in_inode_table * 16 + 2]) then
    // release inode and return -2
    multipush(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);
    R1 = RELEASE_INODE;
    R2 = index_in_inode_table;
    R3 = current_PID;
    call RESOURCE_MANAGER;
    multipop(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);

    // assuming release worked successfully 
    [process_table_entry + 9] = 0;

    // return -2
    [return_address] = -2;

    SP = userSP;
    ireturn;
endif;


// Find the disk block number and 
// the position in the block from which input is read.

// Get the block index from lseek position.   /* lseek/512 gives the index of the block */
// Get the disk block number corresponding to the block index from the Inode Table .
// Get the offset value from lseek position.   /* lseek%512 gives the position to be read from.*/


// lseek is R4 and phy address of buffer is R3
multipush(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);
R1 = BUFFERED_READ;
R4 = phy_address_of_buffer;
// since lseek in R4 is changed to phy_address_of_buffer, 
// because R4 is an argument to BUFFERED_READ
R3 = [OPEN_FILE_TABLE + index_in_open_file_table * 4 + 2];
// R3 is still not the correct argument, we have to take modulo 512
// but R3 helps in defining R2
R2 = [INODE_TABLE + 16 * index_in_inode_table + 8 + (R3 / 512)];
R3 = R3 % 512;
call FILE_MANAGER;
multipop(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);


// increment the lseek position
[OPEN_FILE_TABLE + 4 * index_in_open_file_table + 2] = [OPEN_FILE_TABLE + 4 * index_in_open_file_table + 2] + 1;

multipush(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);
R1 = RELEASE_INODE;
R2 = index_in_inode_table;
R3 = current_PID;
call RESOURCE_MANAGER;
multipop(R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R4, R3);

// reset the mode flag
[process_table_entry + 9] = 0;

// return 0
[return_address] = 0;

// switch to user stack 
SP = userSP;
ireturn;
















