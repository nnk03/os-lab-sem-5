// OS STARTUP

// loadi (memory block, disk block);


// idle-process
loadi(69, 11);
// loadi(70, 12); 

loadi(54, 67);
loadi(55, 68); // loading module 7

loadi(2, 15);
loadi(3, 16);




loadi(63,13);
loadi(64,14); //library



// setting SP to (user area page number * 512 - 1) , i.e 76
SP = 76 * 512 - 1;
//;
// breakpoint;
call BOOT_MODULE;
//;



// IDLE_PROCESS

PTBR = PAGE_TABLE_BASE;  //as PID of idle process is 0
PTLR = 10;
// for idle process
//Library
[PTBR+0] = 63;
[PTBR+1] = "0000";
[PTBR+2] = 64;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


// [PTBR+10] = 

//Stack
[PTBR+16] = 70;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[70 * 512] = [69 * 512 + 1];

// for idle process - 0
//pid
[PROCESS_TABLE + 1] = 0;
// tick
[PROCESS_TABLE + 0] = 0;
// userID
[PROCESS_TABLE + 3] = 0;
//STATE
[PROCESS_TABLE + 4] = RUNNING;
//UAPN
[PROCESS_TABLE + 11] = 76;
//UPTR
[PROCESS_TABLE + 13] = 8 * 512;
//KPTR
[PROCESS_TABLE + 12] = 0;
//PTBR
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;
//PTLR
[PROCESS_TABLE + 15] = 10;




// SWAPPER_DAEMON


PTBR = PAGE_TABLE_BASE + 15 * 20;  //as PID of SWAPPER_DAEMON is 15
PTLR = 10;


// for SWAPPER_DAEMON
//Library
[PTBR+0] = 63;
[PTBR+1] = "0000";
[PTBR+2] = 64;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[81 * 512] = [69 * 512 + 1];

//pid
[PROCESS_TABLE + 300 + 1] = SWAPPER_DAEMON;
// tick
[PROCESS_TABLE + 300 + 0] = 0;
// user id
[PROCESS_TABLE + 300 + 3] = 0;
//STATE
[PROCESS_TABLE + 300 + 4] = CREATED;
//UAPN
[PROCESS_TABLE + 300 +11] = 82;
//UPTR
[PROCESS_TABLE + 300 +13] = 8 * 512;
//KPTR
[PROCESS_TABLE + 300 +12] = 0;
//PTBR
[PROCESS_TABLE + 300 +14] = PAGE_TABLE_BASE + 300;
//PTLR
[PROCESS_TABLE + 300 +15] = 10;



PTBR = PAGE_TABLE_BASE;  //as PID of idle process is 0
PTLR = 10;

[SYSTEM_STATUS_TABLE + 1] = 0;



SP = 8 * 512;
breakpoint;
ireturn;



