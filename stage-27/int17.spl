// LOGIN ---> interrupt 17

// storing userSP
alias userSP R5;
userSP = SP;

// extracting system call number from userStack
alias system_call_number R6;
system_call_number = [[PTBR + 2 * (userSP - 5) / 512] * 512 + (userSP - 5) % 512];


// switching to kernel stack
alias current_PID R7;
alias process_table_entry R8;
current_PID = [SYSTEM_STATUS_TABLE + 1];
process_table_entry = PROCESS_TABLE + current_PID * 16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11] * 512 - 1;

alias return_address R9;
return_address = [PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512;


// set mode flag
[process_table_entry + 9] = INT_LOGIN;

// arguments are username and unencrypted password
alias user_name R10;
alias password R11;
user_name = [[PTBR + 2 * (userSP - 4) / 512] * 512 + (userSP - 4) % 512];
password = [[PTBR + 2 * (userSP - 3) / 512] * 512 + (userSP - 3) % 512];

// if PID of current process is not 1, then return -2
if([SYSTEM_STATUS_TABLE + 1] != 1) then
    [process_table_entry + 9] = 0;
    [return_address] = -2;
    SP = userSP;
    ireturn;
endif;

// encrypting the password
encrypt R11;
// now the alias password stores encrypted password

alias user_table_index R12;
user_table_index = 0;
while(user_table_index < MAX_USER_NUM) do
    if([USER_TABLE + 2 * user_table_index + 0] == user_name && [USER_TABLE + 2 * user_table_index + 1] == password) then
        break;
    endif;
    user_table_index = user_table_index + 1;
endwhile;

if(user_table_index == MAX_USER_NUM) then
    // user entry not found, return -1 
    print("here");
    [process_table_entry + 9] = 0;
    [return_address] = -1;
    SP = userSP;
    ireturn;
endif;

// in the process table entry of shell process, set STATE to 
// CREATED and userID of that to the user who is logging in 
// shell is assumed to be PID 2

// state
[PROCESS_TABLE + 16 * 2 + 4] = CREATED;
// userID
[PROCESS_TABLE + 16 * 2 + 3] = user_table_index;

// login waits for shell to exit

[PROCESS_TABLE + 16 * current_PID + 4] = WAIT_PROCESS;
[PROCESS_TABLE + 16 * current_PID + 5] = 2;

// in the SYSTEM_STATUS_TABLE, set CURRENT_USER_ID to that of the current_user
[SYSTEM_STATUS_TABLE + 0] = user_table_index;

multipush(R5, R6, R7, R8, R9, R10, R11, R12);
call SCHEDULER;
multipop(R5, R6, R7, R8, R9, R10, R11, R12);

// reset the mode flag
[process_table_entry + 9] = 0;
[return_address] = 0;
SP = userSP;
ireturn;































