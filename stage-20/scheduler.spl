//breakpoint;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 12] = SP % 512;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 14] = PTBR;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 15] = PTLR;

alias currentPID R0;
alias process_table_entry R1;
alias newPID R2;

multipush(BP);

currentPID=[SYSTEM_STATUS_TABLE+1];

process_table_entry=PROCESS_TABLE+currentPID*16;

[process_table_entry+12]=SP%512;
[process_table_entry+14]=PTBR;
[process_table_entry+15]=PTLR;

alias cnt R3;
// ==============================================================================

// slightly different algo for scheduler
// cnt = currentPID + 1;
// // first checking from the succeding process to last process
// while(cnt < MAX_PROC_NUM) do 
// 	if([PROCESS_TABLE+(cnt*16)+4]==CREATED || [PROCESS_TABLE+(cnt*16)+4]==READY)then
// 		break;
// 	endif;
// 	cnt = cnt + 1;
// endwhile;
// 
// if(cnt == MAX_PROC_NUM) then
//     // if no process is found, start from process id 1
//     cnt = 1;
//     while(cnt < currentPID) do
// 	    if([PROCESS_TABLE+(cnt*16)+4]==CREATED || [PROCESS_TABLE+(cnt*16)+4]==READY)then
// 	    	break;
// 	    endif;
// 	    cnt = cnt + 1;
//     endwhile;
// 
//     // if still, no process is found, then schedule idle process
// 
//     if(cnt == currentPID) then
//         cnt = 0;
//     endif;
// 
// 
// endif;
// ==============================================================================

cnt = currentPID + 1;
while(cnt < MAX_PROC_NUM) do 
	if([PROCESS_TABLE+(cnt*16)+4]==CREATED || [PROCESS_TABLE+(cnt*16)+4]==READY)then
		break;
	endif;
	cnt = cnt + 1;
endwhile;
newPID = cnt;
if(cnt == MAX_PROC_NUM) then
	newPID = 0;
endif;

process_table_entry=PROCESS_TABLE+newPID*16;
SP=[process_table_entry+11]*512+[process_table_entry+12];
PTBR=[process_table_entry+14];
PTLR=[process_table_entry+15];
[SYSTEM_STATUS_TABLE+1]=newPID;

if([process_table_entry+4]==CREATED)then
	SP=[process_table_entry+13];
	[process_table_entry+4]=RUNNING;
	[process_table_entry+9]=0;

    // storing the value in the first word of kernel stack to the BP register
    BP = [[process_table_entry + 11] * 512];
    
    // because first word of the user area page number is the beginning of kernel stack ??



	ireturn;
endif;


[process_table_entry + 4] = RUNNING;
[process_table_entry + 9] = 0;

multipop(BP);
//breakpoint;
return;








