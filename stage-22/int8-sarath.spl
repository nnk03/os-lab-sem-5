[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ]*16 + 9] = 8; // fork is executing 

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512-1;

R1 = 1;
call MOD_1;
if(R0 == -1) then
    multipush(R0);
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ]*16 + 9] = 0;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13]; 
    ireturn;
endif;
alias newPID R5;
alias ctr R6;
newPID = R0;
if([PTBR + 4] == -1 || [PTBR + 6] == -1) then
    ctr = 0;
    while(ctr<2) do 
        multipush(R5,R6);
        R1 = 1;
        call MOD_2;
        multipop(R5,R6);
        [PTBR + 2*ctr + 4] = R0;
        [PTBR + 2*ctr + 5] = "0110";
        ctr = ctr + 1;
    endwhile;
endif;
ctr = 0;
while(ctr<3) do
    multipush(R5,R6);
    R1 = 1;
    call MOD_2;
    multipop(R5,R6);
    if(ctr<2) then 
        [PAGE_TABLE_BASE + newPID*20 + 16 + 2*ctr] = R0;
        [PAGE_TABLE_BASE + newPID*20 + 17 + 2*ctr] = "0110";
    endif;
    ctr = ctr + 1;
endwhile;
[PROCESS_TABLE + newPID*16 + 11] = R0;
ctr = 0;
while(ctr<16) do
    if(ctr == 3 || ctr == 6 || ctr == 7 || ctr == 10 || ctr == 13) then
        [PROCESS_TABLE + newPID*16 + ctr] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + ctr];
    endif;
    ctr = ctr + 1;
endwhile;
[PROCESS_TABLE + newPID*16 + 2] = [SYSTEM_STATUS_TABLE + 1];
[PROCESS_TABLE + newPID*16] = 0;
[PROCESS_TABLE + newPID*16 + 4] = CREATED;
[PROCESS_TABLE + newPID*16 + 9] = 0;
[PROCESS_TABLE + newPID*16 + 12] = 0; 
ctr = 0;
while(ctr<16) do
    [DISK_MAP_TABLE + newPID*10 + ctr] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + ctr];
    ctr = ctr + 1;
endwhile;

ctr = 0;
while(ctr<16) do 
    [PAGE_TABLE_BASE + newPID*20 + ctr] = [PTBR + ctr];
    if((ctr%2) == 0) then
        [MEMORY_FREE_LIST + [PTBR + ctr]] = [MEMORY_FREE_LIST + [PTBR + ctr]] + 1; 
    endif;
    ctr = ctr + 1;  //copying the heap code and library pages
endwhile;

ctr = 0;
while(ctr<1024) do
    [[PAGE_TABLE_BASE + newPID*20 + 16]*512 + ctr] = [[PTBR+16]*512 + ctr];
    ctr = ctr + 1;
endwhile;


// have to do per process resource table and share the semaphores

[[PROCESS_TABLE + newPID*16 + 11]*512] = BP;
[[PTBR + 2 * ([PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] - 1)/ 512] * 512 + ([PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13] - 1) % 512] = newPID;
[[PAGE_TABLE_BASE +newPID*20 + 2 * ([PROCESS_TABLE+newPID*16+13] - 1)/ 512] * 512 + ( [PROCESS_TABLE+newPID*16+13]- 1) % 512] = 0;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ]*16 + 9] = 0; //resetting the mode of Parent
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
ireturn;
