// interrupt 14
// SEMLOCK and SEMUNLOCK
//breakpoint;
print("KERNEL");


// storing userSP
alias userSP R5;
userSP = SP;

// extracting sytem call number from user stack 
alias system_call_number R6;
system_call_number = [[PTBR + 2 * (userSP - 5) / 512] * 512 + (userSP - 5) % 512];

// switching to kernel stack
alias current_PID R7;
alias process_table_entry R8;
current_PID = [SYSTEM_STATUS_TABLE + 1];
process_table_entry = PROCESS_TABLE + current_PID * 16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11] * 512 - 1;

alias return_address R15;
return_address = [PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512;


if(system_call_number == INT_SEMLOCK) then
    // argument is sem_descriptor

    [process_table_entry + 9] = INT_SEMLOCK;

    alias sem_id R9;
    sem_id = [[PTBR + 2 * (userSP - 4) / 512] * 512 + (userSP - 4) % 512];

    alias user_area_page_end R10;
    user_area_page_end = [process_table_entry + 11] * 512 + RESOURCE_TABLE_OFFSET;

    if(sem_id < 0 || sem_id >= 8 || [user_area_page_end + 2 * sem_id + 0] != SEMAPHORE) then
        [return_address] = -1;
        [process_table_entry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias sem_table_index R11;
    sem_table_index = [user_area_page_end + 2 * sem_id + 1];

    while([SEMAPHORE_TABLE + 4 * sem_table_index + 0] != -1 && [SEMAPHORE_TABLE + 4 * sem_table_index + 0] != current_PID) do
        [process_table_entry + 4] = WAIT_SEMAPHORE;
        [process_table_entry + 5] = sem_table_index;
        multipush(R5, R6, R7, R8, R9, R10, R11, R15);
        call SCHEDULER;
        multipop(R5, R6, R7, R8, R9, R10, R11, R15);
    endwhile;

    [SEMAPHORE_TABLE + 4 * sem_table_index + 0] = current_PID;

    [process_table_entry + 9] = 0;

    [return_address] = 0;

    SP = userSP;
    //breakpoint;
    ireturn;



endif;

if(system_call_number == INT_SEMUNLOCK) then
    [process_table_entry + 9] = INT_SEMUNLOCK;
    alias sem_id R9;
    sem_id = [[PTBR + 2 * (userSP - 4) / 512] * 512 + (userSP - 4) % 512];
    
    alias user_area_page_end R10;
    user_area_page_end = [process_table_entry + 11] * 512 + RESOURCE_TABLE_OFFSET;
    
    if(sem_id < 0 || sem_id >= 8 || [user_area_page_end + 2 * sem_id + 0] != SEMAPHORE) then
        [return_address] = -1;
        [process_table_entry + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias sem_table_index R11;
    sem_table_index = [user_area_page_end + 2 * sem_id + 1];

    if([SEMAPHORE_TABLE + 4 * sem_table_index + 0] != -1) then
        if(current_PID != [SEMAPHORE_TABLE + 4 * sem_table_index + 0]) then
            [return_address] = -2;
            [process_table_entry + 9] = 0;
            SP = userSP;
            ireturn;
        endif;
        [SEMAPHORE_TABLE + 4 * sem_table_index + 0] = -1;

        alias cnt R12;
        cnt = 0;
        while(cnt < MAX_PROC_NUM) do
            if([PROCESS_TABLE + cnt * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + cnt * 16 + 5] == sem_table_index) then
                [PROCESS_TABLE + cnt * 16 + 4] = READY;
            endif;
            cnt = cnt + 1;
        endwhile;
    endif;

    [return_address] = 0;
    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;





endif;

















