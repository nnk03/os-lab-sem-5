// mod-7 --> boot module

loadi(4, 17);
loadi(5, 18); // for timer interrupt handler

loadi(8, 21);
loadi(9, 22); // for console interrupt

loadi(14, 27);
loadi(15, 28); // for interrupt 6 routine --> Terminal Read

loadi(65,7);
loadi(66,8); // init

loadi(22,35);
loadi(23,36); // int 10 module

loadi(63,13);
loadi(64,14); //library

loadi(16, 29);
loadi(17, 30); // for int-7 handler


loadi(2, 15);
loadi(3, 16); // exception handler


loadi(83, 69); // for even.xsm

loadi(50, 63);
loadi(51, 64); // for module - 5  --> scheduler

loadi(40, 53);
loadi(41, 54); // for module 0 --> resource manager

loadi(48, 61);
loadi(49, 62); // for module 4 --> device manager 

[TERMINAL_STATUS_TABLE + 0] = 0; // denoting terminal is free before scheduling the first process

loadi(20, 33);
loadi(21, 34); // for interrupt 9 --> exec

loadi(42, 55);
loadi(43, 56); // for module 1 --> Process manager

loadi(44, 57);
loadi(45, 58); // for module 2 --> memory manager;

loadi(59, 3);
loadi(60, 4); // for loading memory copy of inode table

loadi(6, 19);
loadi(7, 20); // for interrupt 2 --> Disk interrupt handler 

loadi(61, 2); // for loading DISK_FREE_LIST

alias cnt R0;
cnt = 0;
while(cnt < MAX_PROC_NUM) do 
	[PROCESS_TABLE + (cnt * 16) + 4] = TERMINATED;
	cnt = cnt + 1;
endwhile;

// initializing the STATE of the DISK_STATUS_TABLE to 0
[DISK_STATUS_TABLE + 0] = 0;


// initializing per process table of INIT process 
alias user_area_page_end R1;
user_area_page_end = [PROCESS_TABLE + (1 * 16) + 11] * 512 + 512 - 16;
cnt = 0;
// setting last 8 entries (2 words per entry) to -1
while(cnt < 16) do 
    [user_area_page_end + cnt] = -1;
    [user_area_page_end + cnt + 1] = -1;
    cnt = cnt + 2;
endwhile;




// for shell.xsm

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// for init process - 1
//PID
[PROCESS_TABLE + 16 + 1] = 1;
//STATE
[PROCESS_TABLE + 16 + 4] = CREATED;
//UAPN
[PROCESS_TABLE + 16 + 11] = 80;
//PTBR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
//PTLR
[PROCESS_TABLE + 16 + 15] = 10;
//UPTR
[PROCESS_TABLE + 16 + 13] = 8 * 512;
//KPTR 
[PROCESS_TABLE + 16 + 12] = 0;

// initializing the DISK_MAP_TABLE of init process

cnt = 0;

while(cnt < 10) do
    [DISK_MAP_TABLE + 1 * 10 + cnt] = -1;
    cnt = cnt + 1;
endwhile;

// code pages of INIT
[DISK_MAP_TABLE + 1 * 10 + 4] = 7;
[DISK_MAP_TABLE + 1 * 10 + 5] = 8; 


[76 * 512] = [65 * 512 + 1];
//

//  the effective free pool (MEM_FREE_COUNT value) at the end of OS initialization process starts from memory page 83.
cnt = 0;
while(cnt < 83) do 
    [MEMORY_FREE_LIST + cnt] = 1;
    cnt = cnt + 1;
endwhile;

while(cnt < MAX_MEM_PAGE) do 
    [MEMORY_FREE_LIST + cnt] = 0;
    cnt = cnt + 1;
endwhile;


// initializing WAIT_MEM_COUNT to zero
[SYSTEM_STATUS_TABLE + 3] = 0;

// initializing MEM_FREE_COUNT in system status table
[SYSTEM_STATUS_TABLE + 2] = 128 - 83;


//print("ret boot");


return;



