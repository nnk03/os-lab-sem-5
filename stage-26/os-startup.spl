// idle-process
loadi(69, 11);
// loadi(70, 12); 

// from boot module
loadi(63,13);
loadi(64,14); //library

loadi(67, 9);
loadi(68, 10); // for shell program

loadi(34, 47);
loadi(35, 48); // for interrupt 16 --> NEWUSR, REMUSR, SETPWD, GETUNAME, GETUID

loadi(26, 39);
loadi(27, 40); // for interrupt 12 --> logout

loadi(36, 49);
loadi(37, 50); // for interrupt 17 --> login



// loadi (memory block, disk block);

loadi(4, 17);
loadi(5, 18); // for timer interrupt handler

loadi(8, 21);
loadi(9, 22); // for console interrupt

loadi(14, 27);
loadi(15, 28); // for interrupt 6 routine --> Terminal Read

// init
loadi(65,7);
// loadi(66,8); 

loadi(22,35);
loadi(23,36); // int 10 module


loadi(16, 29);
loadi(17, 30); // for int-7 handler


loadi(2, 15);
loadi(3, 16); // exception handler

// end of from boot module

loadi(54, 67);
loadi(55, 68); // loading module 7

// setting SP to (user area page number * 512 - 1) , i.e 76
SP = 76 * 512 - 1;
//;
// breakpoint;
call BOOT_MODULE;
//;
PTBR = PAGE_TABLE_BASE;  //as PID of idle process is 0
PTLR = 10;
// for idle process
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


// [PTBR+10] = 

//Stack
[PTBR+16] = 70;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

// [PTBR+16] = 

// for idle process - 0
//pid
[PROCESS_TABLE + 1] = 0;
//STATE
[PROCESS_TABLE + 4] = RUNNING;
//UAPN
[PROCESS_TABLE + 11] = 76;
//UPTR
[PROCESS_TABLE + 13] = 8 * 512;
//KPTR
[PROCESS_TABLE + 12] = 0;
//PTBR
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;
//PTLR
[PROCESS_TABLE + 15] = 10;


PTBR = PAGE_TABLE_BASE;  //as PID of init process is 1

[70 * 512] = [69 * 512 + 1];
[SYSTEM_STATUS_TABLE + 1] = 0;

// alias cnt R4;
// cnt = 0;
// while(cnt < MAX_USER_NUM) do
//     print([USER_TABLE + 2 * cnt]);
// 
//     cnt = cnt + 1;
// endwhile;



SP = 8 * 512;
ireturn;






// Changes for idle process allocation
// Load only the first code page from disk to memory (instead of two code pages). See disk/memory organization.
// Allocate second code page (70) as user stack page for idle (only one page for user stack is needed). Allocate memory page 76 for kernel stack of idle.
// Change the page table entries for stack and code pages according to above allocation. Also change the user area page number in the process table entry of idle.
// Store the starting IP address from the header of the first code page on the top of new user stack as the user stack page number is changed now for idle.
