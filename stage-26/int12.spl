// LOGOUT --> interrupt 12


// storing userSP
alias userSP R5;
userSP = SP;

// extracting system call number from userStack
alias system_call_number R6;
system_call_number = [[PTBR + 2 * (userSP - 5) / 512] * 512 + (userSP - 5) % 512];


// switching to kernel stack
alias current_PID R7;
alias process_table_entry R8;
current_PID = [SYSTEM_STATUS_TABLE + 1];
process_table_entry = PROCESS_TABLE + current_PID * 16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11] * 512 - 1;

alias return_address R9;
return_address = [PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512;

// setting the mode flag
[process_table_entry + 9] = INT_LOGOUT;

// no arguments

// if current process is not shell, then return -1
// shell is assumed to be PID 2
if([SYSTEM_STATUS_TABLE + 1] != 2) then
    [process_table_entry + 9] = 0;
    [return_address] = -1;
    SP = userSP;
    ireturn;
endif;

// kill all user process except shell 
multipush(R5, R6, R7, R8, R9);
R1 = KILL_ALL;
// kill all except shell process
R2 = 2;
call PROCESS_MANAGER;
multipop(R5, R6, R7, R8, R9);

// set state of current process(i.e shell) to TERMINATED
[PROCESS_TABLE + 16 * current_PID + 4] = TERMINATED;

// /* Shell should be set ready to run when the next user logs in. */

// Obtain the entry point IP value from the header of the 
// shell program. Place it in the beginning (logical addesss 4096) 
// of the stack of the shell(current process). 
// Reset the USERSP field of the shell to 4096.


// since the current process is shell, PTBR will be the PTBR of shell
// to get the IP from the header, take the 1'th entry of the code page
// which can be obtained from the [PTBR + 8]

// ?????????????????????????????????????????????????????? 
// not yet completed



// Wake up the Login process by changing STATE in it's process table entry to READY.
[PROCESS_TABLE + 16 * 2 + 4] = READY;

// In system status table, reset the CURRENT_USER_ID field back to 0 (kernel).
[SYSTEM_STATUS_TABLE + 0] = 0;

multipush(R5, R6, R7, R8, R9);
call SCHEDULER;
multipop(R5, R6, R7, R8, R9);

// return value for logout is
// -1 on error, otherwise does not return

[process_table_entry + 9] = 0;
[return_address] = 0;
SP = userSP;
ireturn;


































