// OS STARTUP

// setting SP to (user area page number * 512 - 1) , i.e 76
SP = 76 * 512 - 1;
//;
// breakpoint;
loadi(54, 67);
loadi(55, 68);
call BOOT_MODULE;
//;

PTBR = PAGE_TABLE_BASE;  //as PID of idle process is 0
PTLR = 10;
// idle-process
loadi(69, 11);

// for idle process
//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


// [PTBR+10] = 

//Stack
[PTBR+16] = 70;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[70 * 512] = [69 * 512 + 1];

// for idle process - 0
// tick
[PROCESS_TABLE + 0] = 0;
//pid
[PROCESS_TABLE + 1] = 0;
// user ID
[PROCESS_TABLE + 3] = 0;
//STATE
[PROCESS_TABLE + 4] = RUNNING;
//UAPN
[PROCESS_TABLE + 11] = 76;
//UPTR
[PROCESS_TABLE + 13] = 8 * 512;
//KPTR
[PROCESS_TABLE + 12] = 0;
//PTBR
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;
//PTLR
[PROCESS_TABLE + 15] = 10;


// for swapper daemon
PTBR = PAGE_TABLE_BASE + 300;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[81 * 512] = [69 * 512 + 1];

alias process_table_entry R13;
process_table_entry = PROCESS_TABLE + 300;

// tick
[process_table_entry+ 0] = 0;
//pid
[process_table_entry+ 1] = SWAPPER_DAEMON;
// user ID
[process_table_entry+ 3] = 0;
//STATE
[process_table_entry+ 4] = CREATED;
//UAPN
[process_table_entry+ 11] = 82;
//UPTR
[process_table_entry+ 13] = 8 * 512;
//KPTR
[process_table_entry+ 12] = 0;
//PTBR
[process_table_entry+ 14] = PAGE_TABLE_BASE + 300;
//PTLR
[process_table_entry+ 15] = 10;












PTBR = PAGE_TABLE_BASE;  //as PID of idle process is 0

[SYSTEM_STATUS_TABLE + 1] = 0;

// alias cnt R4;
// cnt = 0;
// while(cnt < MAX_USER_NUM) do
//     print([USER_TABLE + 2 * cnt]);
// 
//     cnt = cnt + 1;
// endwhile;



SP = 8 * 512;
// breakpoint;
ireturn;






// Changes for idle process allocation
// Load only the first code page from disk to memory (instead of two code pages). See disk/memory organization.
// Allocate second code page (70) as user stack page for idle (only one page for user stack is needed). Allocate memory page 76 for kernel stack of idle.
// Change the page table entries for stack and code pages according to above allocation. Also change the user area page number in the process table entry of idle.
// Store the starting IP address from the header of the first code page on the top of new user stack as the user stack page number is changed now for idle.

