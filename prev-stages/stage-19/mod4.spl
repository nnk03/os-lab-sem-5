// device manager
alias functionNum R1;
alias currentPID R2;
alias word R3;

if(functionNum == DISK_LOAD) then 
    alias PID R2;
    alias page_number R3;
    alias block_number R4;

    multipush(R1, R2, R3, R4);
    R1 = ACQUIRE_DISK;
    R2 = PID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4);

    [DISK_STATUS_TABLE + 0] = 1; // STATUS
    [DISK_STATUS_TABLE + 1] = 0; // LOAD / STORE : load indicated by 0
    [DISK_STATUS_TABLE + 2] = page_number;
    [DISK_STATUS_TABLE + 3] = block_number;
    [DISK_STATUS_TABLE + 4] = PID; // current PID;

    load(page_number, block_number);
    [PROCESS_TABLE + (PID * 16) + 4] = WAIT_DISK;

    multipush(R1, R2, R3, R4);
    call CONTEXT_SWITCH;
    multipop(R1, R2, R3, R4);

    return;

    
    
    

endif;



if(functionNum == TERMINAL_READ) then
// we will add the Terminal Read function
    multipush(R1, R2, R3);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call MOD_0; // call RESOURCE_MANAGER also does the same thing 
    multipop(R1, R2, R3);
    read;
    [PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
    multipush(R1, R2, R3);
    call CONTEXT_SWITCH;
    multipop(R1, R2, R3);
    alias virt_address R4;
    alias phy_address R5;
    alias word_address R3;
    virt_address = word_address;
    phy_address = [PTBR + (virt_address / 512) * 2] * 512 + (virt_address % 512);
    [phy_address] = [PROCESS_TABLE + (currentPID * 16) + 8];
    return;






endif;


if(functionNum == TERMINAL_WRITE) then
    multipush(R1, R2, R3);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call MOD_0;
    // ignoring value in R0 as acquire terminal does not have a return value
    multipop(R1, R2, R3);
    print word;
    multipush(R1, R2, R3);
    R1 = RELEASE_TERMINAL;
    R2 = currentPID;
    call MOD_0;
    // return value stored in R0
    // as of now, we will ignore it
    multipop(R1, R2, R3);
    return;


else
    return;

endif;
