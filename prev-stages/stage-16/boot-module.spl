// mod-7 --> boot module

loadi(4, 17);
loadi(5, 18); // for timer interrupt handler

loadi(8, 21);
loadi(9, 22); // for console interrupt

loadi(14, 27);
loadi(15, 28); // for interrupt 6 routine --> Terminal Read

loadi(65,7);
loadi(66,8); // init

loadi(22,35);
loadi(23,36); // int 10 module

loadi(63,13);
loadi(64,14); //library

loadi(16, 29);
loadi(17, 30); // for int-7 handler

loadi(69, 11);
loadi(70, 12); // idle-process

loadi(2, 15);
loadi(3, 16); // exception handler

loadi(54, 67);
loadi(55, 68); // loading module 7

loadi(83, 69); // for even.xsm

loadi(50, 63);
loadi(51, 64); // for module - 5  --> scheduler

loadi(40, 53);
loadi(41, 54); // for module 0 --> resource manager

loadi(48, 61);
loadi(49, 62); // for module 4 --> device manager 

[TERMINAL_STATUS_TABLE + 0] = 0; // denoting terminal is free before scheduling the first process

alias cnt R0;
cnt = 0;
while(cnt < MAX_PROC_NUM) do 
	[PROCESS_TABLE + (cnt * 16) + 4] = TERMINATED;
	cnt = cnt + 1;
endwhile;

// for odd.xsm

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// for init process - 1
//PID
[PROCESS_TABLE + 16 + 1] = 1;
//STATE
[PROCESS_TABLE + 16 + 4] = CREATED;
//UAPN
[PROCESS_TABLE + 16 + 11] = 80;
//PTBR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
//PTLR
[PROCESS_TABLE + 16 + 15] = 10;
//UPTR
[PROCESS_TABLE + 16 + 13] = 8 * 512;
//KPTR 
[PROCESS_TABLE + 16 + 12] = 0;



[76 * 512] = [65 * 512 + 1];
//
return;



