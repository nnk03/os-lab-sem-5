// shutdown

// storing userSP
alias userSP R5;
userSP = SP;
// print("shutdowncall");

// switching to kernel stack
alias current_PID R7;
alias process_table_entry R8;
current_PID = [SYSTEM_STATUS_TABLE + 1];
process_table_entry = PROCESS_TABLE + current_PID * 16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11] * 512 - 1;

// set the mode flag
[process_table_entry + 9] = INT_SHUTDOWN;

// shutdown can be only invoked from shell
// if current process is not shell, 
// i.e PID in process table is not equal to 1 or 
// current user is not root 

if(current_PID != 1 || [process_table_entry + 3] != 1) then
    // store -1 as return value
    [[PTBR + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512] = -1;

    // reset the mode flag
    [process_table_entry + 9] = 0;
    // print "ERROR";
    // change to user stack and return to user mode
    SP = userSP;
    ireturn;


endif;


// print("startSTORE");

// page number , block number

// inode + user table 59, 60 -- 3, 4
multipush(R5, R6, R7, R8);
R1 = DISK_STORE;
R2 = current_PID;
R3 = 59;
R4 = 3;
call DEVICE_MANAGER;
multipop(R5, R6, R7, R8);

multipush(R5, R6, R7, R8);
R1 = DISK_STORE;
R2 = current_PID;
R3 = 60;
R4 = 4;
call DEVICE_MANAGER;
multipop(R5, R6, R7, R8);

// root file 62 -- 5

multipush(R5, R6, R7, R8);
R1 = DISK_STORE;
R2 = current_PID;
R3 = 62;
R4 = 5;
call DEVICE_MANAGER;
multipop(R5, R6, R7, R8);

// disk free list 61 -- 2

multipush(R5, R6, R7, R8);
R1 = DISK_STORE;
R2 = current_PID;
R3 = 61;
R4 = 2;
call DEVICE_MANAGER;
multipop(R5, R6, R7, R8);






halt;














